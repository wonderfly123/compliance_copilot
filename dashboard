import React, { useState } from 'react';

const EmergencyDashboard = () => {
  // State management
  const [sidebarExpanded, setSidebarExpanded] = useState(true);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [isCopilotOpen, setIsCopilotOpen] = useState(false);
  
  // Color scheme
  const colorScheme = {
    primary: '#2c4a34', // Dark olive green for sidebar
    secondary: '#4d8061', // Medium green for buttons
    accent: '#5a9e6f', // Lighter green for accents
    background: '#ffffff', // White background
    text: '#2a3b2d', // Dark green text
    lightText: '#ffffff', // White text
  };

  // Mock data - Plans with expiration and compliance
  const recentPlans = [
    { id: 1, title: 'Marin County EOP 2025', expires: '2025-06-30', lastUpdated: '2025-03-15', status: 'In Review', compliance: 85, criticalSections: 2 },
    { id: 2, title: 'City of Oakland Hazard Mitigation Plan', expires: '2025-04-15', lastUpdated: '2025-02-28', status: 'Draft', compliance: 72, criticalSections: 5 },
    { id: 3, title: 'Bay Area Regional Emergency Communications Plan', expires: '2026-01-10', lastUpdated: '2025-03-10', status: 'Final', compliance: 94, criticalSections: 0 },
    { id: 4, title: 'San Mateo County Evacuation Plan', expires: '2025-05-22', lastUpdated: '2024-12-05', status: 'Needs Review', compliance: 63, criticalSections: 7 },
    { id: 5, title: 'Berkeley Wildfire Preparedness Plan', expires: '2025-08-15', lastUpdated: '2025-02-12', status: 'In Review', compliance: 88, criticalSections: 1 },
  ];

  // Common plan sections needing attention
  const sectionUpdates = [
    { section: 'Contact Information', plansAffected: 8, priority: 'High' },
    { section: 'Evacuation Routes', plansAffected: 4, priority: 'Critical' },
    { section: 'Resource Allocation', plansAffected: 6, priority: 'Medium' },
    { section: 'Communication Protocols', plansAffected: 5, priority: 'Critical' },
    { section: 'Recovery Procedures', plansAffected: 3, priority: 'Medium' },
  ];

  // Navigation items
  const navItems = [
    { id: 'dashboard', label: 'Dashboard', icon: 'M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6' },
    { id: 'plans', label: 'Plans', icon: 'M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z' },
    { id: 'documents', label: 'Documents', icon: 'M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2' },
    { id: 'templates', label: 'Templates', icon: 'M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z' },
    { id: 'settings', label: 'Settings', icon: 'M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z' }
  ];

  // Calculate plan statistics
  const expiringPlans = recentPlans.filter(plan => {
    const expiryDate = new Date(plan.expires);
    const today = new Date();
    const daysUntilExpiry = Math.ceil((expiryDate - today) / (1000 * 60 * 60 * 24));
    return daysUntilExpiry <= 30 && daysUntilExpiry > 0;
  }).length;

  const lowCompliancePlans = recentPlans.filter(plan => plan.compliance < 75).length;
  const criticalSectionsCount = recentPlans.reduce((total, plan) => total + plan.criticalSections, 0);

  // Event handlers
  const toggleSidebar = () => {
    setSidebarExpanded(!sidebarExpanded);
  };

  const toggleCopilot = () => {
    setIsCopilotOpen(!isCopilotOpen);
  };

  // Function to get date in relative format
  const getRelativeDate = (dateString) => {
    const date = new Date(dateString);
    const today = new Date();
    const daysDiff = Math.ceil((date - today) / (1000 * 60 * 60 * 24));
    
    if (daysDiff < 0) {
      return `${Math.abs(daysDiff)} days ago`;
    } else if (daysDiff === 0) {
      return 'Today';
    } else if (daysDiff === 1) {
      return 'Tomorrow';
    } else if (daysDiff <= 30) {
      return `In ${daysDiff} days`;
    } else {
      return date.toLocaleDateString();
    }
  };

  return (
    <div className="flex h-screen bg-white">
      {/* Sidebar */}
      <div 
        className={`${sidebarExpanded ? 'w-64' : 'w-16'} transition-all duration-300 flex flex-col border-r`}
        style={{ backgroundColor: colorScheme.primary, color: colorScheme.lightText }}
      >
        {/* Logo and sidebar toggle */}
        <div className="flex items-center justify-between h-16 px-3 border-b" style={{ borderColor: 'rgba(255,255,255,0.2)' }}>
          {sidebarExpanded ? (
            <div className="text-xl font-bold">Revali</div>
          ) : (
            <div className="text-xl font-bold text-center">R</div>
          )}
          <button 
            onClick={toggleSidebar}
            className="p-1 hover:bg-opacity-20 hover:bg-white flex-shrink-0"
          >
            <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              {sidebarExpanded ? (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
              ) : (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 5l7 7-7 7M5 5l7 7-7 7" />
              )}
            </svg>
          </button>
        </div>
        
        {/* Navigation items */}
        <div className="flex-1 overflow-y-auto py-4">
          <nav className="px-2 space-y-1">
            {navItems.map((item) => (
              <a
                key={item.id}
                href="#"
                onClick={() => setActiveTab(item.id)}
                className={`
                  ${activeTab === item.id ? 'bg-opacity-30 bg-white' : 'hover:bg-opacity-10 hover:bg-white'} 
                  group flex items-center ${sidebarExpanded ? 'px-2' : 'justify-center'} py-3 text-base font-medium
                `}
              >
                <svg 
                  className={`${sidebarExpanded ? 'mr-3' : ''} h-6 w-6`} 
                  fill="none" 
                  viewBox="0 0 24 24" 
                  stroke="currentColor" 
                  aria-hidden="true"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d={item.icon} />
                </svg>
                {sidebarExpanded && item.label}
              </a>
            ))}
          </nav>
        </div>
        
        {/* User profile section */}
        {sidebarExpanded && (
          <div className="p-4 border-t" style={{ borderColor: 'rgba(255,255,255,0.2)' }}>
            <div className="flex items-center">
              <div className="w-8 h-8 rounded-full bg-gray-300 flex items-center justify-center text-gray-700 font-bold">
                JM
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium">Jordan Millhausen</p>
                <p className="text-xs">Emergency Manager</p>
              </div>
            </div>
          </div>
        )}
      </div>
      
      {/* Main content - Dashboard View */}
      <div className="flex-1 overflow-hidden flex flex-col">
        {/* Simple header */}
        <div className="border-b bg-white">
          <div className="container mx-auto px-6 py-4">
            {/* Header space kept for layout consistency */}
          </div>
        </div>
        
        {/* Dashboard content */}
        <div className="flex-1 overflow-auto">
          <div className="container mx-auto p-6">
            <div className="mb-6">
              <h2 className="text-2xl font-bold mb-2">Emergency Management Dashboard</h2>
              <p className="text-gray-600">Welcome back, Jordan. Here's what needs your attention today.</p>
            </div>
            
            {/* Status Cards - Focus on actionable items */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className="border p-4">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-medium text-gray-500">Plans Expiring Soon</h3>
                  <div className="w-8 h-8 rounded-sm bg-orange-100 flex items-center justify-center">
                    <svg className="w-5 h-5 text-orange-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                </div>
                <p className="text-3xl font-bold">{expiringPlans}</p>
                <p className="text-sm text-orange-600">Expiring within 30 days</p>
              </div>
              
              <div className="border p-4">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-medium text-gray-500">Low Compliance Plans</h3>
                  <div className="w-8 h-8 rounded-sm bg-red-100 flex items-center justify-center">
                    <svg className="w-5 h-5 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                  </div>
                </div>
                <p className="text-3xl font-bold">{lowCompliancePlans}</p>
                <p className="text-sm text-red-600">Below 75% compliance</p>
              </div>
              
              <div className="border p-4">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-medium text-gray-500">Critical Sections</h3>
                  <div className="w-8 h-8 rounded-sm bg-yellow-100 flex items-center justify-center">
                    <svg className="w-5 h-5 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                </div>
                <p className="text-3xl font-bold">{criticalSectionsCount}</p>
                <p className="text-sm text-yellow-600">Sections needing updates</p>
              </div>
            </div>
            
            {/* Priority Plans - Plans needing immediate attention */}
            <div className="mb-6">
              <div className="border">
                <div className="border-b px-4 py-3 flex justify-between items-center">
                  <h3 className="text-lg font-medium">Priority Plans</h3>
                  <button className="text-blue-600 text-sm">View All Plans</button>
                </div>
                <div className="p-4">
                  {recentPlans
                    .filter(plan => plan.compliance < 85 || plan.criticalSections > 0)
                    .slice(0, 3)
                    .map((plan) => (
                    <div key={plan.id} className="border-b last:border-b-0 py-3">
                      <div className="flex justify-between items-start">
                        <div>
                          <h4 className="font-medium">{plan.title}</h4>
                          <div className="flex text-sm text-gray-500 space-x-4">
                            <span>Updated: {plan.lastUpdated}</span>
                            <span className="font-medium" style={{ color: colorScheme.primary }}>
                              Expires: {getRelativeDate(plan.expires)}
                            </span>
                          </div>
                        </div>
                        <span className={`px-2 py-1 text-xs font-semibold ${
                          plan.status === 'Final' ? 'bg-green-100 text-green-800' : 
                          plan.status === 'In Review' ? 'bg-blue-100 text-blue-800' : 
                          plan.status === 'Needs Review' ? 'bg-red-100 text-red-800' :
                          'bg-yellow-100 text-yellow-800'
                        }`}>
                          {plan.status}
                        </span>
                      </div>
                      <div className="mt-2">
                        <div className="flex items-center mb-1">
                          <div className="w-full bg-gray-200 h-2">
                            <div 
                              className={`h-2 ${
                                plan.compliance >= 90 ? 'bg-green-500' : 
                                plan.compliance >= 75 ? 'bg-blue-500' : 
                                'bg-red-500'
                              }`} 
                              style={{width: `${plan.compliance}%`}}
                            ></div>
                          </div>
                          <span className="ml-2 text-sm">{plan.compliance}%</span>
                        </div>
                        {plan.criticalSections > 0 && (
                          <p className="text-sm text-red-600">
                            <svg className="w-4 h-4 inline-block mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                            </svg>
                            {plan.criticalSections} critical section{plan.criticalSections > 1 ? 's' : ''} need{plan.criticalSections > 1 ? '' : 's'} attention
                          </p>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
            
            {/* Common Sections Needing Updates */}
            <div className="mb-6">
              <div className="border">
                <div className="border-b px-4 py-3">
                  <h3 className="text-lg font-medium">Common Sections Needing Updates</h3>
                </div>
                <div className="p-4">
                  <table className="min-w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left pb-2 font-medium text-gray-500">Section</th>
                        <th className="text-left pb-2 font-medium text-gray-500">Affected Plans</th>
                        <th className="text-left pb-2 font-medium text-gray-500">Priority</th>
                        <th className="text-left pb-2 font-medium text-gray-500">Action</th>
                      </tr>
                    </thead>
                    <tbody>
                      {sectionUpdates.map((item, index) => (
                        <tr key={index} className="border-b last:border-b-0">
                          <td className="py-3 font-medium">{item.section}</td>
                          <td className="py-3">{item.plansAffected} plans</td>
                          <td className="py-3">
                            <span className={`px-2 py-1 text-xs font-semibold ${
                              item.priority === 'Critical' ? 'bg-red-100 text-red-800' : 
                              item.priority === 'High' ? 'bg-orange-100 text-orange-800' : 
                              'bg-yellow-100 text-yellow-800'
                            }`}>
                              {item.priority}
                            </span>
                          </td>
                          <td className="py-3">
                            <button className="text-blue-600 hover:text-blue-900">View Details</button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
            
            {/* Quick Actions */}
            <div className="border">
              <div className="border-b px-4 py-3">
                <h3 className="text-lg font-medium">Quick Actions</h3>
              </div>
              <div className="p-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                <button 
                  className="flex items-center px-4 py-2 border"
                  style={{ borderColor: colorScheme.primary, color: colorScheme.primary }}
                >
                  <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  Create New Plan
                </button>
                <button 
                  className="flex items-center px-4 py-2 border"
                  style={{ borderColor: colorScheme.primary, color: colorScheme.primary }}
                >
                  <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 21h7a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v11m0 5l4.879-4.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242z" />
                  </svg>
                  Run Compliance Check
                </button>
                <button 
                  className="flex items-center px-4 py-2 border"
                  style={{ borderColor: colorScheme.primary, color: colorScheme.primary }}
                >
                  <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6z" />
                  </svg>
                  Browse Templates
                </button>
              </div>
            </div>
          </div>
        </div>
        
        {/* Boxy copilot button */}
        <button 
          className="absolute bottom-6 right-6 w-12 h-12 flex items-center justify-center z-10 border shadow"
          style={{ backgroundColor: colorScheme.primary }}
          onClick={toggleCopilot}
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M6 18C7.5 16.5 9 13.5 12 13C12 13 15 14 17.5 11.5C20 9 21 6 21 6C21 6 19.5 8 17 9C17 9 19 7 19 4C19 4 16.5 6.5 14 7C14 7 15 4 13 3C13 3 12 6 9 7C9 7 10 9 8 11C6 13 5 16 6 18Z" stroke="white" strokeWidth="1.5" fill="white"/>
            <circle cx="9" cy="8.5" r="0.5" fill="black" stroke="none"/>
          </svg>
        </button>
        
        {/* Copilot chat panel */}
        {isCopilotOpen && (
          <div className="absolute bottom-20 right-6 w-80 md:w-96 bg-white border shadow z-50 flex flex-col" style={{ height: '500px', maxHeight: 'calc(100vh - 120px)' }}>
            <div className="px-4 py-3 border-b flex justify-between items-center" style={{ backgroundColor: colorScheme.primary, color: 'white' }}>
              <div className="flex items-center">
                <div className="w-8 h-8 rounded-full bg-white bg-opacity-20 flex items-center justify-center mr-2">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M6 18C7.5 16.5 9 13.5 12 13C12 13 15 14 17.5 11.5C20 9 21 6 21 6C21 6 19.5 8 17 9C17 9 19 7 19 4C19 4 16.5 6.5 14 7C14 7 15 4 13 3C13 3 12 6 9 7C9 7 10 9 8 11C6 13 5 16 6 18Z" stroke="white" strokeWidth="1.5" fill="white"/>
                    <circle cx="9" cy="8.5" r="0.5" fill="black" stroke="none"/>
                  </svg>
                </div>
                <div>
                  <h3 className="font-medium">Revali Assistant</h3>
                </div>
              </div>
              <button onClick={toggleCopilot} className="text-white hover:text-gray-200">
                <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              <div className="flex justify-start">
                <div className="max-w-xs lg:max-w-md px-4 py-2 border text-white" style={{ backgroundColor: colorScheme.primary }}>
                  <div className="text-sm">Hello Jordan! I see you have 2 plans expiring soon and 7 critical sections that need attention across your plans. Would you like me to suggest updates for the San Mateo County Evacuation Plan, which has the lowest compliance score?</div>
                  <div className="text-xs text-right mt-1 opacity-70">9:30 AM</div>
                </div>
              </div>
            </div>
            
            <form className="border-t p-2">
              <div className="flex border overflow-hidden">
                <input
                  type="text"
                  placeholder="Type your message..."
                  className="flex-1 px-4 py-2 focus:outline-none"
                />
                <button 
                  type="submit"
                  className="px-4 text-white"
                  style={{ backgroundColor: colorScheme.primary }}
                >
                  <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                  </svg>
                </button>
              </div>
              <div className="text-xs text-gray-500 mt-1 px-2">
                Ask about plan compliance, section updates, or recommendations
              </div>
            </form>
          </div>
        )}
      </div>
    </div>
  );
};

export default EmergencyDashboard;