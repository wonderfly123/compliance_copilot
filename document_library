import React, { useState } from 'react';

const EmergencyManagementUI = () => {
  // State management
  const [sidebarExpanded, setSidebarExpanded] = useState(true);
  const [activeTab, setActiveTab] = useState('documents');
  const [isCopilotOpen, setIsCopilotOpen] = useState(false);
  const [chatMessages, setChatMessages] = useState([
    { 
      sender: 'copilot', 
      text: 'Hello! I\'m Revali, your emergency management assistant. How can I help you today?',
      timestamp: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})
    }
  ]);
  const [userInput, setUserInput] = useState('');
  
  // Color scheme - Green theme
  const colorScheme = {
    primary: '#2c4a34', // Dark olive green for sidebar
    secondary: '#4d8061', // Medium green for buttons
    accent: '#5a9e6f', // Lighter green for accents
    background: '#ffffff', // White background
    text: '#2a3b2d', // Dark green text
    lightText: '#ffffff', // White text
  };

  // Mock data
  const documents = [
    { id: 1, title: 'Marin County EOP 2025', uploadDate: '2025-03-15', status: 'In Review', type: 'EOP' },
    { id: 2, title: 'City of Oakland Hazard Mitigation Plan', uploadDate: '2025-02-28', status: 'Draft', type: 'HMP' },
    { id: 3, title: 'Bay Area Regional Emergency Communications Plan', uploadDate: '2025-03-10', status: 'Final', type: 'Regional Plan' },
  ];

  // Navigation items
  const navItems = [
    { id: 'dashboard', label: 'Dashboard', icon: 'M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6' },
    { id: 'plans', label: 'Plans', icon: 'M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z' },
    { id: 'documents', label: 'Documents', icon: 'M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2' },
    { id: 'analyze', label: 'Analyze', icon: 'M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z' },
    { id: 'templates', label: 'Templates', icon: 'M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z' },
    { id: 'settings', label: 'Settings', icon: 'M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z' }
  ];

  // Event handlers
  const toggleSidebar = () => {
    setSidebarExpanded(!sidebarExpanded);
  };

  const toggleCopilot = () => {
    setIsCopilotOpen(!isCopilotOpen);
  };

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (userInput.trim() === '') return;
    
    // Add user message
    const newUserMessage = {
      sender: 'user',
      text: userInput,
      timestamp: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})
    };
    
    setChatMessages([...chatMessages, newUserMessage]);
    setUserInput('');
    
    // Simulate copilot response after a short delay
    setTimeout(() => {
      const responses = [
        "I can help you analyze that document. Would you like me to check for compliance with FEMA guidelines?",
        "Based on your documents, I recommend updating your evacuation plan to include the latest CDC guidelines.",
        "I've analyzed your EOP and found 3 sections that need attention. Would you like a detailed report?",
        "I can see your HMP was updated recently. Is there anything specific you'd like me to explain?"
      ];
      
      const randomResponse = responses[Math.floor(Math.random() * responses.length)];
      
      const newCopilotMessage = {
        sender: 'copilot',
        text: randomResponse,
        timestamp: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})
      };
      
      setChatMessages(prevMessages => [...prevMessages, newCopilotMessage]);
    }, 1000);
  };

  return (
    <div className="flex h-screen bg-white">
      {/* Sidebar */}
      <div 
        className={`${sidebarExpanded ? 'w-64' : 'w-16'} transition-all duration-300 flex flex-col border-r`}
        style={{ backgroundColor: colorScheme.primary, color: colorScheme.lightText }}
      >
        {/* Logo and sidebar toggle */}
        <div className="flex items-center justify-between h-16 px-3 border-b" style={{ borderColor: 'rgba(255,255,255,0.2)' }}>
          {sidebarExpanded ? (
            <div className="text-xl font-bold">Revali</div>
          ) : (
            <div className="text-xl font-bold text-center">R</div>
          )}
          <button 
            onClick={toggleSidebar}
            className="p-1 hover:bg-opacity-20 hover:bg-white flex-shrink-0"
          >
            <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              {sidebarExpanded ? (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
              ) : (
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 5l7 7-7 7M5 5l7 7-7 7" />
              )}
            </svg>
          </button>
        </div>
        
        {/* Navigation items */}
        <div className="flex-1 overflow-y-auto py-4">
          <nav className="px-2 space-y-1">
            {navItems.map((item) => (
              <a
                key={item.id}
                href="#"
                onClick={() => setActiveTab(item.id)}
                className={`
                  ${activeTab === item.id ? 'bg-opacity-30 bg-white' : 'hover:bg-opacity-10 hover:bg-white'} 
                  group flex items-center ${sidebarExpanded ? 'px-2' : 'justify-center'} py-3 text-base font-medium
                `}
              >
                <svg 
                  className={`${sidebarExpanded ? 'mr-3' : ''} h-6 w-6`} 
                  fill="none" 
                  viewBox="0 0 24 24" 
                  stroke="currentColor" 
                  aria-hidden="true"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d={item.icon} />
                </svg>
                {sidebarExpanded && item.label}
              </a>
            ))}
          </nav>
        </div>
        
        {/* User profile section */}
        {sidebarExpanded && (
          <div className="p-4 border-t" style={{ borderColor: 'rgba(255,255,255,0.2)' }}>
            <div className="flex items-center">
              <div className="w-8 h-8 rounded-full bg-gray-300 flex items-center justify-center text-gray-700 font-bold">
                JM
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium">Jordan Millhausen</p>
                <p className="text-xs">Emergency Manager</p>
              </div>
            </div>
          </div>
        )}
      </div>
      
      {/* Main content */}
      <div className="flex-1 overflow-hidden flex flex-col">
        {/* Simple header */}
        <div className="border-b bg-white">
          <div className="container mx-auto px-6 py-4">
            {/* Header space kept for layout consistency, but content removed */}
          </div>
        </div>
        
        {/* Document content */}
        <div className="flex-1 overflow-auto">
          <div className="container mx-auto p-6">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold">Document Library</h2>
              <button 
                className="flex items-center justify-center px-4 py-2 text-white"
                style={{ backgroundColor: colorScheme.primary }}
              >
                <svg className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Upload Document
              </button>
            </div>
            
            <div className="border">
              <div className="px-4 py-3 border-b flex justify-between items-center">
                <div className="flex items-center">
                  <h3 className="text-lg font-medium">My Documents</h3>
                  <span className="ml-2 bg-gray-100 text-gray-700 py-1 px-2 text-xs">{documents.length}</span>
                </div>
                <div className="flex space-x-2">
                  <div className="relative">
                    <input type="text" placeholder="Search documents..." className="border py-2 px-4 pl-10 focus:outline-none" />
                    <div className="absolute left-3 top-2.5">
                      <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                      </svg>
                    </div>
                  </div>
                  <select className="border py-2 px-4">
                    <option>All Types</option>
                    <option>EOP</option>
                    <option>HMP</option>
                    <option>COOP</option>
                    <option>Regional Plan</option>
                  </select>
                </div>
              </div>
              
              <div className="overflow-x-auto">
                {documents.length > 0 ? (
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Document Title</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Uploaded</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {documents.map((doc) => (
                        <tr key={doc.id}>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">{doc.title}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{doc.type}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{doc.uploadDate}</td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`px-2 inline-flex text-xs leading-5 font-semibold ${
                              doc.status === 'Final' ? 'bg-green-100 text-green-800' : 
                              doc.status === 'In Review' ? 'bg-blue-100 text-blue-800' : 
                              'bg-yellow-100 text-yellow-800'
                            }`}>
                              {doc.status}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            <button className="text-blue-600 hover:text-blue-900 mr-2">View</button>
                            <button className="text-blue-600 hover:text-blue-900 mr-2">Edit</button>
                            <button className="text-blue-600 hover:text-blue-900">Analyze</button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                ) : (
                  <div className="py-8 text-center text-gray-500">
                    <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <h3 className="mt-2 text-sm font-medium">No documents</h3>
                    <p className="mt-1 text-sm">Get started by uploading your first document.</p>
                    <div className="mt-6">
                      <button 
                        className="inline-flex items-center px-4 py-2 text-sm font-medium text-white" 
                        style={{ backgroundColor: colorScheme.primary }}
                      >
                        <svg className="-ml-1 mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        Upload a document
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
        
        {/* Boxy copilot button */}
        <button 
          className="absolute bottom-6 right-6 w-12 h-12 flex items-center justify-center z-10 border shadow"
          style={{ backgroundColor: colorScheme.primary }}
          onClick={toggleCopilot}
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M6 18C7.5 16.5 9 13.5 12 13C12 13 15 14 17.5 11.5C20 9 21 6 21 6C21 6 19.5 8 17 9C17 9 19 7 19 4C19 4 16.5 6.5 14 7C14 7 15 4 13 3C13 3 12 6 9 7C9 7 10 9 8 11C6 13 5 16 6 18Z" stroke="white" strokeWidth="1.5" fill="white"/>
            <circle cx="9" cy="8.5" r="0.5" fill="black" stroke="none"/>
          </svg>
        </button>
        
        {/* Copilot chat panel */}
        {isCopilotOpen && (
          <div className="absolute bottom-20 right-6 w-80 md:w-96 bg-white border shadow z-50 flex flex-col" style={{ height: '500px', maxHeight: 'calc(100vh - 120px)' }}>
            {/* Chat header */}
            <div className="px-4 py-3 border-b flex justify-between items-center" style={{ backgroundColor: colorScheme.primary, color: 'white' }}>
              <div className="flex items-center">
                <div className="w-8 h-8 rounded-full bg-white bg-opacity-20 flex items-center justify-center mr-2">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M6 18C7.5 16.5 9 13.5 12 13C12 13 15 14 17.5 11.5C20 9 21 6 21 6C21 6 19.5 8 17 9C17 9 19 7 19 4C19 4 16.5 6.5 14 7C14 7 15 4 13 3C13 3 12 6 9 7C9 7 10 9 8 11C6 13 5 16 6 18Z" stroke="white" strokeWidth="1.5" fill="white"/>
                    <circle cx="9" cy="8.5" r="0.5" fill="black" stroke="none"/>
                  </svg>
                </div>
                <div>
                  <h3 className="font-medium">Revali Assistant</h3>
                </div>
              </div>
              <button onClick={toggleCopilot} className="text-white hover:text-gray-200">
                <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            {/* Chat messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {chatMessages.map((message, index) => (
                <div 
                  key={index} 
                  className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div 
                    className={`max-w-xs lg:max-w-md px-4 py-2 border ${
                      message.sender === 'user' 
                        ? 'bg-gray-100 text-gray-800' 
                        : 'text-white'
                    }`}
                    style={message.sender === 'copilot' ? { backgroundColor: colorScheme.primary } : {}}
                  >
                    <div className="text-sm">{message.text}</div>
                    <div className="text-xs text-right mt-1 opacity-70">{message.timestamp}</div>
                  </div>
                </div>
              ))}
            </div>
            
            {/* Input area */}
            <form onSubmit={handleSendMessage} className="border-t p-2">
              <div className="flex border overflow-hidden">
                <input
                  type="text"
                  value={userInput}
                  onChange={(e) => setUserInput(e.target.value)}
                  placeholder="Type your message..."
                  className="flex-1 px-4 py-2 focus:outline-none"
                />
                <button 
                  type="submit"
                  className="px-4 text-white"
                  style={{ backgroundColor: colorScheme.primary }}
                  disabled={!userInput.trim()}
                >
                  <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                  </svg>
                </button>
              </div>
              <div className="text-xs text-gray-500 mt-1 px-2">
                Ask about plan analysis, compliance checks, or document creation
              </div>
            </form>
          </div>
        )}
      </div>
    </div>
  );
};

export default EmergencyManagementUI;